name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies with uv
        run: |
          uv venv
          uv sync --dev

      - name: Install and setup Trunk
        uses: trunk-io/trunk-action@v1
        with:
          check-mode: all

      - name: Run Trunk code quality checks
        run: |
          # Trunk handles ruff, bandit via hermetic installs (mypy disabled for performance)
          # Using filtered check to match local script: ruff, bandit, git-diff-check
          trunk check --filter=ruff,bandit,git-diff-check --all --upstream origin/${{ github.event.repository.default_branch }}
        continue-on-error: false

      - name: Run fallback tools if Trunk fails
        if: failure()
        run: |
          echo "ðŸš¨ Trunk failed, running fallback script..."
          chmod +x tools/check-fallback.sh
          ./tools/check-fallback.sh

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-uv-
            ${{ runner.os }}-uv-

      - name: Install dependencies with uv
        run: |
          uv venv
          # Install with dev dependencies for compatibility
          uv sync --dev

      - name: Run tests with pytest
        run: |
          # Run tests excluding network-dependent tests for CI
          uv run pytest tests/ --cov=cryptofeed --cov-report=xml --cov-report=term-missing -m "not network" --tb=short

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install and setup Trunk
        uses: trunk-io/trunk-action@v1
        with:
          check-mode: all

      - name: Run Trunk security scan (bandit)
        run: |
          # Run only bandit via Trunk for security scanning
          trunk check --filter=bandit --all --output-format=json > bandit-report.json

      - name: Run fallback bandit if Trunk fails
        if: failure()
        run: |
          echo "ðŸš¨ Trunk bandit failed, running fallback..."
          python -m pip install --upgrade pip
          pip install bandit[toml]
          bandit -r cryptofeed/ -f json -o bandit-report.json || true

      - name: Upload Bandit scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  build-and-install:
    name: Build and Install Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install build dependencies
        run: |
          uv venv
          uv sync --dev

      - name: Build package
        run: uv run python -m build

      - name: Test installation
        run: |
          uv venv
          uv pip install dist/*.whl
          python -c "import cryptofeed; print('Package installed successfully')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-install
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-packages
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install package from wheel
        run: |
          uv venv
          uv pip install dist/*.whl
          uv pip install pytest pytest-asyncio

      - name: Run integration tests
        run: |
          # Add integration tests here when available
          echo "Integration tests placeholder"
        continue-on-error: true

  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv venv
          uv sync --dev

      - name: Check dependencies for vulnerabilities
        run: |
          uv run safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload safety scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: safety-report.json

  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv venv
          uv sync --dev

      - name: Run performance benchmarks
        run: |
          # Add performance tests here when available
          echo "Performance benchmarks placeholder"
        continue-on-error: true
