name: Release Pipeline

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.2.3)"
        required: true
        default: "v1.0.0"

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies with uv
        run: |
          uv venv
          uv sync --dev
          uv pip install -e .

      - name: Install and setup Trunk
        uses: trunk-io/trunk-action@v1
        with:
          check-mode: all

      - name: Run quality checks with Trunk
        run: |
          trunk check --all --upstream origin/${{ github.event.repository.default_branch }}

      - name: Run tests
        run: uv run pytest tests/ -v
        continue-on-error: true

      - name: Validate version format
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "Valid version tag format"
          else
            echo "Invalid version tag format"
            exit 1
          fi

  build-release:
    name: Build Release Package
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install build dependencies
        run: |
          uv venv
          uv pip install build wheel cython setuptools

      - name: Build source distribution
        run: python -m build --sdist

      - name: Build wheel distribution
        run: python -m build --wheel

      - name: Verify distributions
        run: |
          python -m pip install twine
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-distributions
          path: dist/

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-distributions
          path: dist/

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # Release ${{ steps.version.outputs.version }}

          ## What's Changed
          - See CHANGES.md for detailed changelog

          ## Installation
          \`\`\`bash
          pip install cryptofeed==${{ steps.version.outputs.version }}
          \`\`\`

          ## Docker
          \`\`\`bash
          docker pull cryptofeed:${{ steps.version.outputs.version }}
          \`\`\`

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/\
          v${{ steps.version.outputs.version }}...HEAD
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          files: |
            dist/*.tar.gz
            dist/*.whl
          draft: false
          prerelease: ${{ 
            contains(steps.version.outputs.version, 'rc') || 
            contains(steps.version.outputs.version, 'beta') || 
            contains(steps.version.outputs.version, 'alpha') }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    environment: release
    permissions:
      id-token: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
        continue-on-error: true

      - name: Wait for TestPyPI propagation
        run: sleep 60

      - name: Test installation from TestPyPI
        run: |
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ cryptofeed
          python -c "import cryptofeed; print('Package installed successfully from TestPyPI')"
        continue-on-error: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: validate-release
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: cryptofeed/cryptofeed
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
