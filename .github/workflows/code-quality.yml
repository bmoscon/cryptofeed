name: Code Quality Analysis

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Mondays at 2 AM
  workflow_dispatch:
    inputs:
      full_analysis:
        description: 'Run full analysis including performance benchmarks'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  trunk-analysis:
    name: Trunk Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --dev
          uv pip install -e .

      - name: Install and setup Trunk
        uses: trunk-io/trunk-action@v1
        with:
          check-mode: all

      - name: Run comprehensive Trunk analysis
        run: |
          # Generate detailed reports in multiple formats
          echo "🔍 Running comprehensive code quality analysis..."
          
          # JSON report for programmatic processing
          trunk check --all --output-format=json > trunk-report.json || true
          
          # SARIF report for GitHub security tab
          trunk check --all --output-format=sarif > trunk-report.sarif || true
          
          # Human-readable report
          trunk check --all --output-format=text > trunk-report.txt || true
          
          # Show summary in logs
          echo "📊 Quality Analysis Summary:"
          cat trunk-report.txt | head -50 || echo "No issues found!"

      - name: Run fallback analysis if Trunk fails
        if: failure()
        run: |
          echo "🚨 Trunk failed, running comprehensive fallback analysis..."
          chmod +x tools/check-fallback.sh
          ./tools/check-fallback.sh
          
          # Generate fallback reports
          echo "📝 Generating fallback reports..."
          
          # Ruff analysis
          uv add --dev ruff
          uv run ruff check . --output-format=json > fallback-ruff.json || true
          uv run ruff check . --output-format=sarif > fallback-ruff.sarif || true
          
          # MyPy analysis  
          uv add --dev mypy
          uv run mypy cryptofeed --ignore-missing-imports --json-report mypy-report || true
          
          # Bandit security analysis
          uv add --dev bandit
          uv run bandit -r cryptofeed/ -f json -o fallback-bandit.json || true
          uv run bandit -r cryptofeed/ -f sarif -o fallback-bandit.sarif || true
          
          # Cleanup
          uv remove --dev ruff mypy bandit

      - name: Generate quality metrics
        run: |
          echo "📈 Generating quality metrics..."
          
          # Count lines of code
          find cryptofeed/ -name "*.py" -exec wc -l {} + | tail -1 > metrics.txt
          echo "Total Python files: $(find cryptofeed/ -name '*.py' | wc -l)" >> metrics.txt
          
          # Count TODO/FIXME comments
          echo "TODO comments: $(grep -r "TODO\|FIXME" cryptofeed/ --include="*.py" | wc -l)" >> metrics.txt
          
          # Calculate complexity (if available)
          uv add --dev radon || true
          if command -v radon &> /dev/null; then
            echo "Cyclomatic Complexity Analysis:" >> metrics.txt
            uv run radon cc cryptofeed/ -a >> metrics.txt || true
            echo "Maintainability Index:" >> metrics.txt  
            uv run radon mi cryptofeed/ >> metrics.txt || true
            uv remove --dev radon || true
          fi
          
          echo "📊 Quality Metrics:"
          cat metrics.txt

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: |
            trunk-report.json
            trunk-report.sarif
            trunk-report.txt
            fallback-*.json
            fallback-*.sarif
            mypy-report/
            metrics.txt
          retention-days: 30

      - name: Upload SARIF reports to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && (github.event_name == 'push' || github.event_name == 'pull_request')
        with:
          sarif_file: |
            trunk-report.sarif
            fallback-ruff.sarif
            fallback-bandit.sarif
        continue-on-error: true

      - name: Quality gate check
        run: |
          echo "🚪 Checking quality gates..."
          
          # Initialize counters
          CRITICAL_ISSUES=0
          HIGH_ISSUES=0
          
          # Check Trunk report if available
          if [ -f "trunk-report.json" ] && [ -s "trunk-report.json" ]; then
            echo "📋 Analyzing Trunk report..."
            # Parse JSON for high/critical issues (simplified - would need jq for full parsing)
            grep -i "error\|critical" trunk-report.json && CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1)) || true
            grep -i "high" trunk-report.json && HIGH_ISSUES=$((HIGH_ISSUES + 1)) || true
          fi
          
          # Quality gate thresholds
          MAX_CRITICAL=0
          MAX_HIGH=10
          
          echo "📊 Quality Gate Results:"
          echo "Critical issues: $CRITICAL_ISSUES (max: $MAX_CRITICAL)"
          echo "High issues: $HIGH_ISSUES (max: $MAX_HIGH)"
          
          # Fail if thresholds exceeded
          if [ $CRITICAL_ISSUES -gt $MAX_CRITICAL ]; then
            echo "❌ Quality gate FAILED: Too many critical issues ($CRITICAL_ISSUES > $MAX_CRITICAL)"
            exit 1
          fi
          
          if [ $HIGH_ISSUES -gt $MAX_HIGH ]; then
            echo "⚠️  Quality gate WARNING: Many high issues ($HIGH_ISSUES > $MAX_HIGH)"
            # Don't fail on high issues, just warn
          fi
          
          echo "✅ Quality gate PASSED"

      - name: Comment PR with quality summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let summary = '## 📊 Code Quality Analysis\n\n';
            
            // Read metrics if available
            try {
              const metrics = fs.readFileSync('metrics.txt', 'utf8');
              summary += '### 📈 Metrics\n```\n' + metrics + '\n```\n\n';
            } catch (e) {
              summary += '### 📈 Metrics\nMetrics generation failed\n\n';
            }
            
            // Read trunk report summary if available
            try {
              const report = fs.readFileSync('trunk-report.txt', 'utf8');
              const lines = report.split('\n').slice(0, 20); // First 20 lines
              summary += '### 🔍 Analysis Summary\n```\n' + lines.join('\n') + '\n```\n\n';
            } catch (e) {
              summary += '### 🔍 Analysis Summary\nTrunk analysis completed - check artifacts for details\n\n';
            }
            
            summary += '### 📋 Reports Available\n';
            summary += '- 📄 Detailed analysis reports in workflow artifacts\n';
            summary += '- 🛡️ Security findings in GitHub Security tab\n';
            summary += '- 📊 Quality metrics and complexity analysis\n\n';
            summary += '> 🤖 Generated by Code Quality workflow';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  complexity-analysis:
    name: Complexity & Maintainability
    runs-on: ubuntu-latest
    if: github.event.inputs.full_analysis == 'true' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install analysis tools
        run: |
          uv pip install radon xenon vulture
          uv sync --dev
          uv pip install -e .

      - name: Run complexity analysis
        run: |
          echo "🧮 Running complexity analysis..."
          
          # Cyclomatic Complexity
          echo "=== Cyclomatic Complexity ===" > complexity-report.txt
          uv run radon cc cryptofeed/ -a -nc >> complexity-report.txt
          
          # Maintainability Index
          echo -e "\n=== Maintainability Index ===" >> complexity-report.txt
          uv run radon mi cryptofeed/ -nc >> complexity-report.txt
          
          # Raw metrics
          echo -e "\n=== Raw Metrics ===" >> complexity-report.txt
          uv run radon raw cryptofeed/ >> complexity-report.txt
          
          # Halstead metrics
          echo -e "\n=== Halstead Metrics ===" >> complexity-report.txt
          uv run radon hal cryptofeed/ >> complexity-report.txt

      - name: Find dead code
        run: |
          echo "🪦 Searching for dead code..."
          uv run vulture cryptofeed/ > dead-code-report.txt || true
          
          echo "📋 Dead code analysis:"
          cat dead-code-report.txt | head -20

      - name: Check for code smells
        run: |
          echo "👃 Checking for code smells..."
          
          # Long functions (>50 lines)
          echo "=== Long Functions ===" > code-smells.txt
          find cryptofeed/ -name "*.py" -exec awk '/^def |^class / { name=$0; start=NR } /^def |^class |^$/ { if (name && NR-start > 50) print FILENAME ":" start ":" name; name="" }' {} + >> code-smells.txt
          
          # High complexity functions
          echo -e "\n=== High Complexity Functions ===" >> code-smells.txt
          uv run xenon --max-absolute B --max-modules A --max-average A cryptofeed/ >> code-smells.txt || true

      - name: Upload complexity reports
        uses: actions/upload-artifact@v4
        with:
          name: complexity-analysis
          path: |
            complexity-report.txt
            dead-code-report.txt
            code-smells.txt
          retention-days: 30

  documentation-check:
    name: Documentation Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install documentation tools
        run: |
          uv pip install pydocstyle interrogate
          uv sync --dev
          uv pip install -e .

      - name: Check docstring coverage
        run: |
          echo "📚 Checking documentation coverage..."
          
          # Docstring coverage report
          uv run interrogate cryptofeed/ -v --ignore-init-method --ignore-magic --ignore-module --ignore-nested-functions > doc-coverage.txt
          
          echo "📊 Documentation Coverage:"
          cat doc-coverage.txt

      - name: Check docstring style
        run: |
          echo "📝 Checking docstring style..."
          uv run pydocstyle cryptofeed/ > docstring-style.txt || true
          
          echo "📋 Docstring style issues:"
          cat docstring-style.txt | head -20

      - name: Upload documentation reports
        uses: actions/upload-artifact@v4
        with:
          name: documentation-analysis
          path: |
            doc-coverage.txt
            docstring-style.txt
          retention-days: 30